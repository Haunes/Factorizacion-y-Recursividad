# -*- coding: utf-8 -*-
"""Punto_1_y_2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1k8XWDBQZGaPCWgnPlwXVuLw0YttQFMBy
"""

def eliminar_recursividad_izquierda(gramatica):
    nueva_gramatica = {}
    for variable, producciones in gramatica.items():
        alfa = []
        beta = []
        for produccion in producciones:
            if produccion[0] == variable:
                alfa.append(produccion[1:])
            else:
                beta.append(produccion)
        if alfa:
            nueva_variable = variable + "'"
            nueva_gramatica[nueva_variable] = [tuple(x + [nueva_variable]) for x in alfa] + [('ε',)]
            nueva_gramatica[variable] = [tuple(x + [nueva_variable]) for x in beta]
        else:
            nueva_gramatica[variable] = [tuple(produccion) for produccion in producciones]
    return nueva_gramatica

def factorizar_terminos_comunes(gramatica):
    nueva_gramatica = {}
    for variable, producciones in gramatica.items():
        prefijos = {}
        for produccion in producciones:
            for i in range(1, len(produccion)):
                prefijo = produccion[:i]
                sufijo = produccion[i:]
                if prefijo not in prefijos:
                    prefijos[prefijo] = []
                prefijos[prefijo].append(sufijo)

        nueva_variable = variable
        for prefijo, sufijos in prefijos.items():
            if len(prefijo) > 0:
                nueva_variable_prefijo = f"{variable}_{prefijo[0]}"
                nueva_gramatica[nueva_variable_prefijo] = [tuple(prefijo) + (nueva_variable_prefijo,)]
                for sufijo in sufijos:
                    nueva_gramatica[nueva_variable_prefijo].append(tuple(sufijo))
            else:
                nueva_gramatica[nueva_variable] = [tuple(sufijo) for sufijo in sufijos]

    return nueva_gramatica

# Ejemplo de uso
gramatica_original = {
    'S': [['A', 'B', 'C'], ['D', 'E']],
    'A': [['dos', 'B', 'tres'], ['ε']],
    'B': [['B', 'cuatro', 'C', 'cinco'], ['ε']],
    'C': [['seis', 'A', 'B'], ['ε']],
    'D': [['uno', 'A', 'E'], ['B']],
    'E': [['tres']]
}

nueva_gramatica = factorizar_terminos_comunes(eliminar_recursividad_izquierda(gramatica_original))

resultado = {}
for variable, producciones in nueva_gramatica.items():
    resultado[variable] = [list(p) for p in producciones]

print(resultado)